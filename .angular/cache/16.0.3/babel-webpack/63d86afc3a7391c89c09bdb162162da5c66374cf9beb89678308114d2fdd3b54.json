{"ast":null,"code":"import _asyncToGenerator from \"C:/ionic/camApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Filesystem, Directory } from '@capacitor/filesystem';\nimport { Preferences } from '@capacitor/preferences';\nimport { Capacitor } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nlet FotoService = /*#__PURE__*/(() => {\n  class FotoService {\n    constructor(platform) {\n      this.platform = platform;\n      this.fotos = [];\n      this.FOTO_ARMAZENAMENTO = 'fotos';\n      this.convertBlobToBase64 = blob => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n        reader.onload = () => {\n          resolve(reader.result);\n        };\n        reader.readAsDataURL(blob);\n      });\n    }\n    carregarFotosSalvas() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Recuperar as fotos em cache\n        const listaFotos = yield Preferences.get({\n          key: _this.FOTO_ARMAZENAMENTO\n        });\n        _this.fotos = JSON.parse(listaFotos.value) || [];\n        // Se não estiver rodando no navegador...\n        if (!_this.platform.is('hybrid')) {\n          // Exibir a foto lendo-a no formato base64\n          for (let foto of _this.fotos) {\n            // Ler os dados de cada foto salva no sistema de arquivos\n            const readFile = yield Filesystem.readFile({\n              path: foto.filepath,\n              directory: Directory.Data\n            });\n            // Somente na plataforma da Web: Carregar a foto como dados base64\n            foto.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\n          }\n        }\n      })();\n    }\n    tirarFoto() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        // Take a photo\n        const fotoCapturada = yield Camera.getPhoto({\n          resultType: CameraResultType.Uri,\n          source: CameraSource.Camera,\n          quality: 50 // deixar em 50 para nao gerar um arquivo muito grande em cameras boas.\n        });\n\n        const salvarArquivoFoto = yield _this2.salvarFoto(fotoCapturada);\n        // Adicionar nova foto à matriz Fotos\n        _this2.fotos.unshift(salvarArquivoFoto);\n        // Armazenar em cache todos os dados da foto para recuperação futura\n        Preferences.set({\n          key: _this2.FOTO_ARMAZENAMENTO,\n          value: JSON.stringify(_this2.fotos)\n        });\n      })();\n    }\n    // Salvar imagem em um arquivo no dispositivo\n    salvarFoto(foto) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        // Converta a foto para o formato base64, exigido pela API do sistema de arquivos para salvar\n        const base64Data = yield _this3.readAsBase64(foto);\n        // Gravar o arquivo no diretório de dados\n        const nomeArquivo = new Date().getTime() + '.jpeg';\n        const arquivoSalvo = yield Filesystem.writeFile({\n          path: nomeArquivo,\n          data: base64Data,\n          directory: Directory.Data\n        });\n        if (_this3.platform.is('hybrid')) {\n          // Exiba a nova imagem reescrevendo o caminho 'file://' para HTTP\n          // Detalhes: https://ionicframework.com/docs/building/webview#file-protocol\n          return {\n            filepath: arquivoSalvo.uri,\n            webviewPath: Capacitor.convertFileSrc(arquivoSalvo.uri)\n          };\n        } else {\n          // Use o webPath para exibir a nova imagem em vez da base64, pois ela já está carregada na memória\n          return {\n            filepath: nomeArquivo,\n            webviewPath: foto.webPath\n          };\n        }\n      })();\n    }\n    // Leia a foto da câmera no formato base64 com base na plataforma em que o aplicativo está sendo executado\n    readAsBase64(foto) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        // \"híbrido\" detectará Cordova ou Capacitor\n        if (_this4.platform.is('hybrid')) {\n          // Ler o arquivo no formato base64\n          const arquivo = yield Filesystem.readFile({\n            path: foto.path\n          });\n          return arquivo.data;\n        } else {\n          // Obtenha a foto, leia-a como um blob e, em seguida, converta-a para o formato base64\n          const resposta = yield fetch(foto.webPath);\n          const blob = yield resposta.blob();\n          return yield _this4.convertBlobToBase64(blob);\n        }\n      })();\n    }\n    // Excluir a imagem, removendo-a dos dados de referência e do sistema de arquivos\n    deletePicture(foto, posicao) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        // Remover essa foto da matriz de dados de referência Fotos\n        _this5.fotos.splice(posicao, 1);\n        // Atualizar o cache da matriz de fotos sobrescrevendo a matriz de fotos existente\n        Preferences.set({\n          key: _this5.FOTO_ARMAZENAMENTO,\n          value: JSON.stringify(_this5.fotos)\n        });\n        // excluir o arquivo de foto do sistema de arquivos\n        const nomeArquivo = foto.filepath.substr(foto.filepath.lastIndexOf('/') + 1);\n        yield Filesystem.deleteFile({\n          path: nomeArquivo,\n          directory: Directory.Data\n        });\n      })();\n    }\n  }\n  FotoService.ɵfac = function FotoService_Factory(t) {\n    return new (t || FotoService)(i0.ɵɵinject(i1.Platform));\n  };\n  FotoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FotoService,\n    factory: FotoService.ɵfac,\n    providedIn: 'root'\n  });\n  return FotoService;\n})();\nexport { FotoService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}